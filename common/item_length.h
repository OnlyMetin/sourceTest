#ifndef __INC_COMMON_ITEM_LENGTH_H__
#define __INC_COMMON_ITEM_LENGTH_H__

enum EItemMisc
{
	ITEM_NAME_MAX_LEN = 30,
	ITEM_SMALL_DESCR_MAX_LEN = 256,
	METIN_SOCKET_MAX_NUM = 3,
	ITEM_MAX_COUNT = 200, // MAX 32767
	ITEM_LIMIT_MAX_NUM = 2,
#if defined(__ITEM_APPLY4__)
	ITEM_APPLY_MAX_NUM = 4,
#else
	ITEM_APPLY_MAX_NUM = 3,
#endif
#if defined(__ITEM_VALUE10__)
	ITEM_VALUES_MAX_NUM = 10,
#else
	ITEM_VALUES_MAX_NUM = 6,
#endif
#if defined(__ITEM_SOCKET6__)
	ITEM_SOCKET_MAX_NUM = 6,
#else
	ITEM_SOCKET_MAX_NUM = 3,
#endif

	REFINE_MATERIAL_MAX_NUM = 5,
#if defined(__REFINE_ELEMENT_SYSTEM__)
	REFINE_ELEMENT_MAX = 3,
#endif

	ITEM_ATTRIBUTE_NORM_NUM = 5,
	ITEM_ATTRIBUTE_RARE_NUM = 2,
	ITEM_ATTRIBUTE_NORM_START = 0,
	ITEM_ATTRIBUTE_NORM_END = ITEM_ATTRIBUTE_NORM_START + ITEM_ATTRIBUTE_NORM_NUM,
	ITEM_ATTRIBUTE_RARE_START = ITEM_ATTRIBUTE_NORM_END,
	ITEM_ATTRIBUTE_RARE_END = ITEM_ATTRIBUTE_RARE_START + ITEM_ATTRIBUTE_RARE_NUM,
	ITEM_ATTRIBUTE_MAX_NUM = ITEM_ATTRIBUTE_RARE_END,

#if defined(__ATTR_6TH_7TH__)
	ITEM_ATTRIBUTE_MAX_LEVEL = 10,
#else
	ITEM_ATTRIBUTE_MAX_LEVEL = 5,
#endif

	ITEM_AWARD_WHY_MAX_LEN = 50,
	ITEM_ELK_VNUM = 50026,
};

const BYTE ITEM_SOCKET_REMAIN_SEC = 0;
enum EItemValueIdice
{
	ITEM_VALUE_DRAGON_SOUL_POLL_OUT_BONUS_IDX = 0,
	ITEM_VALUE_CHARGING_AMOUNT_IDX = 0,
	ITEM_VALUE_SECONDARY_COIN_UNIT_IDX = 0,
};
enum EItemDragonSoulSockets
{
	ITEM_SOCKET_DRAGON_SOUL_ACTIVE_IDX = 2,
	ITEM_SOCKET_CHARGING_AMOUNT_IDX = 2,
};

// 헐 이거 미친거 아니야?
// 나중에 소켓 확장하면 어쩌려고 이지랄 -_-;;;
enum EItemUniqueSockets
{
	ITEM_SOCKET_UNIQUE_SAVE_TIME = METIN_SOCKET_MAX_NUM - 2,
	ITEM_SOCKET_UNIQUE_REMAIN_TIME = METIN_SOCKET_MAX_NUM - 1
};

enum EItemTypes
{
	ITEM_NONE,
	ITEM_WEAPON,
	ITEM_ARMOR,
	ITEM_USE,
	ITEM_AUTOUSE,
	ITEM_MATERIAL,
	ITEM_SPECIAL,
	ITEM_TOOL,
	ITEM_LOTTERY,
	ITEM_ELK,
	ITEM_METIN,
	ITEM_CONTAINER,
	ITEM_FISH,
	ITEM_ROD,
	ITEM_RESOURCE,
	ITEM_CAMPFIRE,
	ITEM_UNIQUE,
	ITEM_SKILLBOOK,
	ITEM_QUEST,
	ITEM_POLYMORPH,
	ITEM_TREASURE_BOX,
	ITEM_TREASURE_KEY,
	ITEM_SKILLFORGET,
	ITEM_GIFTBOX,
	ITEM_PICK,
	ITEM_HAIR,
	ITEM_TOTEM,
	ITEM_BLEND,
	ITEM_COSTUME,
	ITEM_DS,
	ITEM_SPECIAL_DS,
	ITEM_EXTRACT,
	ITEM_SECONDARY_COIN,
	ITEM_RING,
	ITEM_BELT,
	ITEM_PET,
#if defined(__MOVE_COSTUME_ATTR__)
	ITEM_MEDIUM,
#endif
#if defined(__GACHA_SYSTEM__)
	ITEM_GACHA,
#endif
	ITEM_PASSIVE,
	ITEM_MERCENARY,
	ITEM_ALCHEMY,
#if defined(__SOUL_SYSTEM__)
	ITEM_SOUL,
#endif
	ITEM_MAX_NUM,
};

enum EWeaponSubTypes
{
	WEAPON_SWORD,
	WEAPON_DAGGER,
	WEAPON_BOW,
	WEAPON_TWO_HANDED,
	WEAPON_BELL,
	WEAPON_FAN,
	WEAPON_ARROW,
	WEAPON_MOUNT_SPEAR,
	WEAPON_CLAW,
#if defined(__QUIVER_SYSTEM__)
	WEAPON_QUIVER,
#endif
	WEAPON_BOUQUET,
	WEAPON_NUM_TYPES,
};

enum EArmorSubTypes
{
	ARMOR_BODY,
	ARMOR_HEAD,
	ARMOR_SHIELD,
	ARMOR_WRIST,
	ARMOR_FOOTS,
	ARMOR_NECK,
	ARMOR_EAR,
#if defined(__PENDANT_SYSTEM__)
	ARMOR_PENDANT,
#endif
#if defined(__GLOVE_SYSTEM__)
	ARMOR_GLOVE,
#endif
	ARMOR_NUM_TYPES,
};

enum EUseSubTypes
{
	USE_POTION,
	USE_TALISMAN,
	USE_TUNING,
	USE_MOVE,
	USE_TREASURE_BOX,
	USE_MONEYBAG,
	USE_BAIT,
	USE_ABILITY_UP,
	USE_AFFECT,
	USE_CREATE_STONE,
	USE_SPECIAL,
	USE_POTION_NODELAY,
	USE_CLEAR,
	USE_INVISIBILITY,
	USE_DETACHMENT,
	USE_BUCKET,
	USE_POTION_CONTINUE,
	USE_CLEAN_SOCKET,
	USE_CHANGE_ATTRIBUTE,
	USE_ADD_ATTRIBUTE,
	USE_ADD_ACCESSORY_SOCKET,
	USE_PUT_INTO_ACCESSORY_SOCKET,
	USE_ADD_ATTRIBUTE2,
	USE_RECIPE,
	USE_CHANGE_ATTRIBUTE2,
	USE_BIND,
	USE_UNBIND,
	USE_TIME_CHARGE_PER,
	USE_TIME_CHARGE_FIX,
	USE_PUT_INTO_BELT_SOCKET,
	USE_PUT_INTO_RING_SOCKET,
#if defined(__MOVE_COSTUME_ATTR__)
	USE_CHANGE_COSTUME_ATTR,
	USE_RESET_COSTUME_ATTR,
#endif
	USE_UNK_33,
#if defined(__CHANGED_ATTR__)
	USE_SELECT_ATTRIBUTE,
#endif
	USE_FLOWER,
#if defined(__EXPRESSING_EMOTIONS__)
	USE_EMOTION_PACK,
#endif
#if defined(__REFINE_ELEMENT_SYSTEM__)
	USE_ELEMENT_UPGRADE,
	USE_ELEMENT_DOWNGRADE,
	USE_ELEMENT_CHANGE,
#endif
	USE_CALL,
	USE_POTION_TOWER,
	USE_POTION_NODELAY_TOWER,
	USE_REMOVE_AFFECT,
	USE_EMOTION_TOWER,
	USE_SECRET_DUNGEON_SCROLL,
};

enum EAutoUseSubTypes
{
	AUTOUSE_POTION,
	AUTOUSE_ABILITY_UP,
	AUTOUSE_BOMB,
	AUTOUSE_GOLD,
	AUTOUSE_MONEYBAG,
	AUTOUSE_TREASURE_BOX,
};

enum EMaterialSubTypes
{
	MATERIAL_LEATHER,
	MATERIAL_BLOOD,
	MATERIAL_ROOT,
	MATERIAL_NEEDLE,
	MATERIAL_JEWEL,
	MATERIAL_DS_REFINE_NORMAL,
	MATERIAL_DS_REFINE_BLESSED,
	MATERIAL_DS_REFINE_HOLLY,
#if defined(__DS_CHANGE_ATTR__)
	MATERIAL_DS_CHANGE_ATTR,
#endif
	MATERIAL_PASSIVE_WEAPON,
	MATERIAL_PASSIVE_ARMOR,
	MATERIAL_PASSIVE_ACCE,
	MATERIAL_PASSIVE_ELEMENT,
};

enum ESpecialSubTypes
{
	SPECIAL_MAP,
	SPECIAL_KEY,
	SPECIAL_DOC,
	SPECIAL_SPIRIT,
};

enum EToolSubTypes
{
	TOOL_FISHING_ROD,
};

enum ELotterySubTypes
{
	LOTTERY_TICKET,
	LOTTERY_INSTANT,
};

enum EMetinSubTypes
{
	METIN_NORMAL,
	METIN_SUNGMA,
};

enum EFishSubTypes
{
	FISH_ALIVE,
	FISH_DEAD,
};

enum EResourceSubTypes
{
	RESOURCE_FISHBONE,
	RESOURCE_WATERSTONEPIECE,
	RESOURCE_WATERSTONE,
	RESOURCE_BLOOD_PEARL,
	RESOURCE_BLUE_PEARL,
	RESOURCE_WHITE_PEARL,
	RESOURCE_BUCKET,
	RESOURCE_CRYSTAL,
	RESOURCE_GEM,
	RESOURCE_STONE,
	RESOURCE_METIN,
	RESOURCE_ORE,
#if defined(__AURA_COSTUME_SYSTEM__)
	RESOURCE_AURA,
#endif
};

enum EUniqueSubTypes
{
	UNIQUE_NONE,
	UNIQUE_BOOK,
	UNIQUE_SPECIAL_RIDE,
	UNIQUE_3,
	UNIQUE_4,
	UNIQUE_5,
	UNIQUE_6,
	UNIQUE_7,
	UNIQUE_8,
	UNIQUE_9,
	UNIQUE_BUNDLE,
};

enum EQuestSubTypes
{
	QUEST_NONE,
	QUEST_PET_PAY,
	QUEST_WARP,
	QUEST_GEM_BAG,
};

enum EGiftBoxSubTypes
{
	GIFTBOX_NONE,
	GIFTBOX_NORMAL,
	GIFTBOX_SPECIAL,
};

enum ECostumeSubTypes
{
	COSTUME_BODY = ARMOR_BODY, // [중요!!] ECostumeSubTypes enum value는 종류별로 EArmorSubTypes의 그것과 같아야 함.
	COSTUME_HAIR = ARMOR_HEAD, // 이는 코스츔 아이템에 추가 속성을 붙이겠다는 사업부의 요청에 따라서 기존 로직을 활용하기 위함임.
#if defined(__MOUNT_COSTUME_SYSTEM__)
	COSTUME_MOUNT,
#endif
#if defined(__ACCE_COSTUME_SYSTEM__)
	COSTUME_ACCE,
#endif
#if defined(__WEAPON_COSTUME_SYSTEM__)
	COSTUME_WEAPON,
#endif
#if defined(__AURA_COSTUME_SYSTEM__)
	COSTUME_AURA,
#endif
	COSTUME_NUM_TYPES,
};

#if defined(__DRAGON_SOUL_SYSTEM__)
enum EDragonSoulSubType
{
	DS_SLOT1,
	DS_SLOT2,
	DS_SLOT3,
	DS_SLOT4,
	DS_SLOT5,
	DS_SLOT6,
#if defined(__DS_7_SLOT__)
	DS_SLOT7,
#endif
	DS_SLOT_MAX,
};
#endif

enum EExtractSubTypes
{
	EXTRACT_DRAGON_SOUL,
	EXTRACT_DRAGON_HEART,
};

enum EPetSubTypes
{
//#if defined(__GROWTH_PET_SYSTEM__)
	PET_EGG,
	PET_UPBRINGING,
	PET_BAG,
	PET_FEEDSTUFF,
	PET_SKILL,
	PET_SKILL_DEL_BOOK,
	PET_NAME_CHANGE,
	PET_EXPFOOD,
	PET_SKILL_ALL_DEL_BOOK,
	PET_EXPFOOD_PER,
//#if defined(__PET_ATTR_DETERMINE__)
	PET_ATTR_DETERMINE,
	PET_ATTR_CHANGE,
//#endif
//#endif
	PET_PAY,
//#if defined(__GROWTH_PET_SYSTEM__) && defined(__PET_PRIMIUM_FEEDSTUFF__)
	PET_PREMIUM_FEEDSTUFF,
//#endif
};

#if defined(__MOVE_COSTUME_ATTR__)
enum EMediumSubTypes
{
	MEDIUM_MOVE_COSTUME_ATTR,
#if defined(__ACCE_COSTUME_SYSTEM__)
	MEDIUM_MOVE_ACCE_ATTR,
#endif
};
#endif

#if defined(__GACHA_SYSTEM__)
enum EGachaSubTypes
{
	USE_GACHA,
#if defined(__LUCKY_BOX__)
	GEM_LUCKY_BOX_GACHA,
	SPECIAL_LUCKY_BOX_GACHA,
#endif
};
#endif

enum EPassiveSubTypes
{
	PASSIVE_JOB,
};

enum EMercenarySubTypes
{
	MERCENARY_0,
	MERCENARY_1,
	MERCENARY_2,
	MERCENARY_3,
	MERCENARY_4,
	MERCENARY_5,
	MERCENARY_6,
};

enum EAlchemySubTypes
{
	ALCHEMY_ARMOR,
	ALCHEMY_WEAPON,
	ALCHEMY_ACCESSORY,
	ALCHEMY_BELT,
	ALCHEMY_EVENT,
	ALCHEMY_ETC,
	ALCHEMY_JOB,
	ALCHEMY_SETADD_WEAPON,
	ALCHEMY_SETADD_ARMOR_BODY,
	ALCHEMY_SETADD_ARMOR_HELMET,
	ALCHEMY_PET,
	ALCHEMY_SKILL_BOOK,
	ALCHEMY_GLOVE,
};

#if defined(__SOUL_SYSTEM__)
enum ESoulSubTypes
{
	RED_SOUL,
	BLUE_SOUL,
};
#endif

enum EItemFlags
{
	ITEM_FLAG_REFINEABLE = (1 << 0),
	ITEM_FLAG_SAVE = (1 << 1),
	ITEM_FLAG_STACKABLE = (1 << 2), // 여러개 합칠 수 있음
	ITEM_FLAG_COUNT_PER_1GOLD = (1 << 3),
	ITEM_FLAG_SLOW_QUERY = (1 << 4),
	ITEM_FLAG_UNIQUE = (1 << 5),
	ITEM_FLAG_MAKECOUNT = (1 << 6),
	ITEM_FLAG_IRREMOVABLE = (1 << 7),
	ITEM_FLAG_CONFIRM_WHEN_USE = (1 << 8),
	ITEM_FLAG_QUEST_USE = (1 << 9),
	ITEM_FLAG_QUEST_USE_MULTIPLE = (1 << 10),
	ITEM_FLAG_QUEST_GIVE = (1 << 11),
	ITEM_FLAG_LOG = (1 << 12),
	ITEM_FLAG_APPLICABLE = (1 << 13),
};

enum EItemAntiFlags
{
	ITEM_ANTIFLAG_FEMALE = (1 << 0), // 여성 사용 불가
	ITEM_ANTIFLAG_MALE = (1 << 1), // 남성 사용 불가
	ITEM_ANTIFLAG_WARRIOR = (1 << 2), // 무사 사용 불가
	ITEM_ANTIFLAG_ASSASSIN = (1 << 3), // 자객 사용 불가
	ITEM_ANTIFLAG_SURA = (1 << 4), // 수라 사용 불가 
	ITEM_ANTIFLAG_SHAMAN = (1 << 5), // 무당 사용 불가
	ITEM_ANTIFLAG_GET = (1 << 6), // 집을 수 없음
	ITEM_ANTIFLAG_DROP = (1 << 7), // 버릴 수 없음
	ITEM_ANTIFLAG_SELL = (1 << 8), // 팔 수 없음
	ITEM_ANTIFLAG_EMPIRE_A = (1 << 9), // A 제국 사용 불가
	ITEM_ANTIFLAG_EMPIRE_B = (1 << 10), // B 제국 사용 불가
	ITEM_ANTIFLAG_EMPIRE_C = (1 << 11), // C 제국 사용 불가
	ITEM_ANTIFLAG_SAVE = (1 << 12), // 저장되지 않음
	ITEM_ANTIFLAG_GIVE = (1 << 13), // 거래 불가
	ITEM_ANTIFLAG_PKDROP = (1 << 14), // PK시 떨어지지 않음
	ITEM_ANTIFLAG_STACK = (1 << 15), // 합칠 수 없음
	ITEM_ANTIFLAG_MYSHOP = (1 << 16), // 개인 상점에 올릴 수 없음
	ITEM_ANTIFLAG_SAFEBOX = (1 << 17), // 창고에 넣을 수 없음
	ITEM_ANTIFLAG_WOLFMAN = (1 << 18),
	ITEM_ANTIFLAG_RT_REMOVE = (1 << 19),
	ITEM_ANTIFLAG_QUICKSLOT = (1 << 20),
#if defined(__CHANGE_LOOK_SYSTEM__)
	ITEM_ANTIFLAG_CHANGELOOK = (1 << 21),
#endif
	ITEM_ANTIFLAG_REINFORCE = (1 << 22),
	ITEM_ANTIFLAG_ENCHANT = (1 << 23),
	ITEM_ANTIFLAG_ENERGY = (1 << 24),
//#if defined(__GROWTH_PET_SYSTEM__)
	ITEM_ANTIFLAG_PETFEED = (1 << 25),
//#endif
	ITEM_ANTIFLAG_APPLY = (1 << 26),
#if defined(__ACCE_COSTUME_SYSTEM__)
	ITEM_ANTIFLAG_ACCE = (1 << 27),
#endif
#if defined(__MAILBOX__)
	ITEM_ANTIFLAG_MAIL = (1 << 28),
#endif
	ITEM_ANTIFLAG_DESTROY = (1 << 29), // Custom
};

enum EItemWearableFlags
{
	WEARABLE_BODY = (1 << 0),
	WEARABLE_HEAD = (1 << 1),
	WEARABLE_FOOTS = (1 << 2),
	WEARABLE_WRIST = (1 << 3),
	WEARABLE_WEAPON = (1 << 4),
	WEARABLE_NECK = (1 << 5),
	WEARABLE_EAR = (1 << 6),
	WEARABLE_UNIQUE = (1 << 7),
	WEARABLE_SHIELD = (1 << 8),
	WEARABLE_ARROW = (1 << 9),
	WEARABLE_HAIR = (1 << 10),
#if defined(__PENDANT_SYSTEM__)
	WEARABLE_PENDANT = (1 << 11),
#endif
#if defined(__GLOVE_SYSTEM__)
	WEARABLE_GLOVE = (1 << 12),
#endif
};

enum EWearPositions
{
	WEAR_BODY,
	WEAR_HEAD,
	WEAR_FOOTS,
	WEAR_WRIST,
	WEAR_WEAPON,
	WEAR_NECK,
	WEAR_EAR,
	WEAR_UNIQUE1,
	WEAR_UNIQUE2,
	WEAR_ARROW,
	WEAR_SHIELD,
	WEAR_BELT,
#if defined(__PENDANT_SYSTEM__)
	WEAR_PENDANT,
#endif
#if defined(__GLOVE_SYSTEM__)
	WEAR_GLOVE,
#endif
	WEAR_COSTUME_BODY,
	WEAR_COSTUME_HAIR,
#if defined(__MOUNT_COSTUME_SYSTEM__)
	WEAR_COSTUME_MOUNT,
#endif
#if defined(__ACCE_COSTUME_SYSTEM__)
	WEAR_COSTUME_ACCE,
#endif
#if defined(__WEAPON_COSTUME_SYSTEM__)
	WEAR_COSTUME_WEAPON,
#endif
#if defined(__AURA_COSTUME_SYSTEM__)
	WEAR_COSTUME_AURA,
#endif
	WEAR_MAX_NUM = 32
};

enum ELimitTypes
{
	LIMIT_NONE,

	LIMIT_LEVEL,
	LIMIT_STR,
	LIMIT_DEX,
	LIMIT_INT,
	LIMIT_CON,

	/// 착용 여부와 상관 없이 실시간으로 시간 차감 (socket0에 소멸 시간이 박힘: unix_timestamp 타입)
	LIMIT_REAL_TIME,

	/// 아이템을 맨 처음 사용(혹은 착용) 한 순간부터 리얼타임 타이머 시작 
	/// 최초 사용 전에는 socket0에 사용가능시간(초단위, 0이면 프로토의 limit value값 사용) 값이 쓰여있다가 
	/// 아이템 사용시 socket1에 사용 횟수가 박히고 socket0에 unix_timestamp 타입의 소멸시간이 박힘.
	LIMIT_REAL_TIME_START_FIRST_USE,

	/// 아이템을 착용 중일 때만 사용 시간이 차감되는 아이템
	/// socket0에 남은 시간이 초단위로 박힘. (아이템 최초 사용시 해당 값이 0이면 프로토의 limit value값을 socket0에 복사)
	LIMIT_TIMER_BASED_ON_WEAR,

	LIMIT_NEWWORLD_LEVEL,
	LIMIT_DURATION,

	LIMIT_MAX_NUM
};

enum EAttrAddonTypes
{
	ATTR_ADDON_NONE,
	// positive values are reserved for set
	ATTR_DAMAGE_ADDON = -1,
};

enum ERefineType
{
	REFINE_TYPE_NORMAL,
	REFINE_TYPE_NOT_USED1,
	REFINE_TYPE_SCROLL,
	REFINE_TYPE_HYUNIRON,
	REFINE_TYPE_MONEY_ONLY,
	REFINE_TYPE_MUSIN,
	REFINE_TYPE_BDRAGON,
#if defined(__STONE_OF_BLESS__)
	REFINE_TYPE_BLESSING_STONE,
#endif
#if defined(__SOUL_SYSTEM__)
	REFINE_TYPE_SOUL_AWAKE,
	REFINE_TYPE_SOUL_EVOLVE,
#endif
};

#if defined(__DRAGON_SOUL_SYSTEM__)
enum EDragonSoulGradeTypes
{
	DRAGON_SOUL_GRADE_NORMAL,
	DRAGON_SOUL_GRADE_BRILLIANT,
	DRAGON_SOUL_GRADE_RARE,
	DRAGON_SOUL_GRADE_ANCIENT,
	DRAGON_SOUL_GRADE_LEGENDARY,
#if defined(__DS_GRADE_MYTH__)
	DRAGON_SOUL_GRADE_MYTH,
#endif
	DRAGON_SOUL_GRADE_MAX,
};

enum EDragonSoulStepTypes
{
	DRAGON_SOUL_STEP_LOWEST,
	DRAGON_SOUL_STEP_LOW,
	DRAGON_SOUL_STEP_MID,
	DRAGON_SOUL_STEP_HIGH,
	DRAGON_SOUL_STEP_HIGHEST,
	DRAGON_SOUL_STEP_MAX,
};

#if defined(__DS_CHANGE_ATTR__)
enum EDragonSoulChangeAttrMaterialCount
{
	DRAGON_SOUL_CHANGE_ATTR_STEP_LOWEST = 1,
	DRAGON_SOUL_CHANGE_ATTR_STEP_LOW = 3,
	DRAGON_SOUL_CHANGE_ATTR_STEP_MID = 9,
	DRAGON_SOUL_CHANGE_ATTR_STEP_HIGH = 27,
	DRAGON_SOUL_CHANGE_ATTR_STEP_HIGHEST = 81,
};
#endif

#define DRAGON_SOUL_STRENGTH_MAX 7

enum EDSInventoryMaxNum
{
	DRAGON_SOUL_INVENTORY_MAX_NUM = DS_SLOT_MAX * DRAGON_SOUL_GRADE_MAX * DRAGON_SOUL_BOX_SIZE,
};
#endif

#if defined(__ACCE_COSTUME_SYSTEM__)
enum EItemAcceSocket
{
	ITEM_SOCKET_ACCE_DRAIN_ITEM_VNUM,
	ITEM_SOCKET_ACCE_DRAIN_VALUE,
};
#endif

#if defined(__AURA_COSTUME_SYSTEM__)
enum EItemAuraSocket
{
	ITEM_SOCKET_AURA_DRAIN_ITEM_VNUM,
	ITEM_SOCKET_AURA_LEVEL_VALUE,
};

enum EItemAuraMaterialValues
{
	ITEM_AURA_MATERIAL_EXP_VALUE,
};
#endif

#if defined(__MOVE_COSTUME_ATTR__) && defined(__ACCE_COSTUME_SYSTEM__)
enum EMediumMoveAcceResult
{
	MEDIUM_MOVE_ACCE_FAIL,
	MEDIUM_MOVE_ACCE_PARTIAL,
	MEDIUM_MOVE_ACCE_SUCCESS,
	MEDIUM_MOVE_ACCE_MAX,
};
#endif

#if defined(__SOUL_SYSTEM__)
enum ESoulGradeType
{
	SOUL_GRADE_BASIC,
	SOUL_GRADE_GLEAMING,
	SOUL_GRADE_LUSTROUS,
	SOUL_GRADE_PRISMATIC,
	SOUL_GRADE_ILUMINED,
	SOUL_GRADE_MAX,
};
#endif

#if defined(__LOOT_FILTER_SYSTEM__)
enum ELootFilter
{
	WEAPON_SELECT_DATA_MAX = 5,
	ARMOR_SELECT_DATA_MAX = 5,
	HEAD_SELECT_DATA_MAX = 5,
	COMMON_SELECT_DATA_MAX = 10,
	COSTUME_SELECT_DATA_MAX = 6,
	DS_SELECT_DATA_MAX = 2,
	UNIQUE_SELECT_DATA_MAX = 2,
	REFINE_SELECT_DATA_MAX = 3,
	POTION_SELECT_DATA_MAX = 3,
	FISH_MINING_SELECT_DATA_MAX = 3,
	MOUNT_PET_SELECT_DATA_MAX = 4,
	SKILL_BOOK_SELECT_DATA_MAX = 6,
	ETC_SELECT_DATA_MAX = 8,
	EVENT_SELECT_DATA_MAX = 0, // Unused

	WEAPON_ON_OFF = 0,
	WEAPON_REFINE_MIN,
	WEAPON_REFINE_MAX,
	WEAPON_WEARING_LEVEL_MIN,
	WEAPON_WEARING_LEVEL_MAX,
	WEAPON_SELECT_DATA_JOB_WARRIOR,
	WEAPON_SELECT_DATA_JOB_SURA,
	WEAPON_SELECT_DATA_JOB_ASSASSIN,
	WEAPON_SELECT_DATA_JOB_SHAMAN,
	WEAPON_SELECT_DATA_JOB_LYCAN,

	ARMOR_ON_OFF,
	ARMOR_REFINE_MIN,
	ARMOR_REFINE_MAX,
	ARMOR_WEARING_LEVEL_MIN,
	ARMOR_WEARING_LEVEL_MAX,
	ARMOR_SELECT_DATA_JOB_WARRIOR,
	ARMOR_SELECT_DATA_JOB_SURA,
	ARMOR_SELECT_DATA_JOB_ASSASSIN,
	ARMOR_SELECT_DATA_JOB_SHAMAN,
	ARMOR_SELECT_DATA_JOB_LYCAN,

	HEAD_ON_OFF,
	HEAD_REFINE_MIN,
	HEAD_REFINE_MAX,
	HEAD_WEARING_LEVEL_MIN,
	HEAD_WEARING_LEVEL_MAX,
	HEAD_SELECT_DATA_JOB_WARRIOR,
	HEAD_SELECT_DATA_JOB_SURA,
	HEAD_SELECT_DATA_JOB_ASSASSIN,
	HEAD_SELECT_DATA_JOB_SHAMAN,
	HEAD_SELECT_DATA_JOB_LYCAN,

	COMMON_ON_OFF,
	COMMON_REFINE_MIN,
	COMMON_REFINE_MAX,
	COMMON_WEARING_LEVEL_MIN,
	COMMON_WEARING_LEVEL_MAX,
	COMMON_SELECT_DATA_SHOE,
	COMMON_SELECT_DATA_BELT,
	COMMON_SELECT_DATA_BRACELET,
	COMMON_SELECT_DATA_NECKLACE,
	COMMON_SELECT_DATA_EARRING,
	COMMON_SELECT_DATA_SHIELD,
	COMMON_SELECT_DATA_GLOVE,
	COMMON_SELECT_DATA_TALISMAN,
	COMMON_SELECT_DATA_FISHING_ROD,
	COMMON_SELECT_DATA_PICKAXE,

	COSTUME_ON_OFF,
	COSTUME_SELECT_DATA_WEAPON,
	COSTUME_SELECT_DATA_ARMOR,
	COSTUME_SELECT_DATA_HAIR,
	COSTUME_SELECT_DATA_ACCE,
	COSTUME_SELECT_DATA_AURA,
	COSTUME_SELECT_DATA_ETC,

	DS_ON_OFF,
	DS_SELECT_DATA_DS,
	DS_SELECT_DATA_ETC,

	UNIQUE_ON_OFF,
	UNIQUE_SELECT_DATA_ABILITY,
	UNIQUE_SELECT_DATA_ETC,

	REFINE_ON_OFF,
	REFINE_SELECT_DATA_MATERIAL,
	REFINE_SELECT_DATA_STONE,
	REFINE_SELECT_DATA_ETC,

	POTION_ON_OFF,
	POTION_SELECT_DATA_ABILITY,
	POTION_SELECT_DATA_HAIRDYE,
	POTION_SELECT_DATA_ETC,

	FISH_MINING_ON_OFF,
	FISH_MINING_SELECT_DATA_FOOD,
	FISH_MINING_SELECT_DATA_STONE,
	FISH_MINING_SELECT_DATA_ETC,

	MOUNT_PET_ON_OFF,
	MOUNT_PET_SELECT_DATA_CHARGED_PET,
	MOUNT_PET_SELECT_DATA_MOUNT,
	MOUNT_PET_SELECT_DATA_FREE_PET,
	MOUNT_PET_SELECT_DATA_EGG,

	SKILL_BOOK_ON_OFF,
	SKILL_BOOK_SELECT_DATA_JOB_WARRIOR,
	SKILL_BOOK_SELECT_DATA_JOB_SURA,
	SKILL_BOOK_SELECT_DATA_JOB_ASSASSIN,
	SKILL_BOOK_SELECT_DATA_JOB_SHAMAN,
	SKILL_BOOK_SELECT_DATA_JOB_LYCAN,
	SKILL_BOOK_SELECT_DATA_JOB_PUBLIC,

	ETC_ON_OFF,
	ETC_SELECT_DATA_GIFTBOX,
	ETC_SELECT_DATA_MATRIMONY,
	ETC_SELECT_DATA_SEAL,
	ETC_SELECT_DATA_PARTY,
	ETC_SELECT_DATA_POLYMORPH,
	ETC_SELECT_DATA_RECIPE,
	ETC_SELECT_DATA_WEAPON_ARROW,
	ETC_SELECT_DATA_ETC,

	EVENT_ON_OFF,

	LOOT_FILTER_SETTINGS_MAX,
};
#endif

#if defined(__ITEM_VALUE10__)
enum EItemValueMinMax
{
	ITEM_VALUE_DEF_MIN_INDEX = 6,
	ITEM_VALUE_MTK_MIN_INDEX = 6,
	ITEM_VALUE_MTK_MAX_INDEX = 7,
	ITEM_VALUE_ATK_MIN_INDEX = 8,
	ITEM_VALUE_ATK_MAX_INDEX = 9,

	ITEM_SOCKET_DEF_MINMAX_RANDOM = 3,
	ITEM_SOCKET_BELT_DEF_MINMAX_RANDOM = 3,
	ITEM_SOCKET_MTK_MINMAX_RANDOM = 3,
	ITEM_SOCKET_ATK_MINMAX_RANDOM = 4,
	ITEM_VALUE_MINMAX_RANDOM_DIVISION_VALUE = 100000,
};
#endif

#endif // __INC_COMMON_ITEM_LENGTH_H__
